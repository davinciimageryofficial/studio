
-- =================================================================
-- 1. Enable pg_cron extension for scheduled tasks
-- =================================================================
create extension if not exists pg_cron with schema "extensions";

-- =================================================================
-- 2. User Profiles, Authentication, and Waitlist
-- =================================================================

-- Create a table for public profiles
create table if not exists profiles (
  id uuid not null references auth.users on delete cascade,
  created_at timestamptz not null default now(),
  updated_at timestamptz,
  full_name text,
  headline text,
  bio text,
  avatar_url text,
  cover_image_url text,
  skills text[],
  category text,
  job_title text,
  company text,
  reliability_score int4 not null default 85,
  community_standing text,
  disputes int4 not null default 0,
  community_flags jsonb,
  primary key (id)
);

-- Set up Row Level Security (RLS)
alter table profiles enable row level security;
create policy "Public profiles are viewable by everyone." on profiles for select using (true);
create policy "Users can insert their own profile." on profiles for insert with check (auth.uid() = id);
create policy "Users can update their own profile." on profiles for update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, full_name, avatar_url, headline, bio, skills, category)
  values (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.raw_user_meta_data->>'avatar_url',
    new.raw_user_meta_data->>'headline',
    new.raw_user_meta_data->>'bio',
    '{}', -- empty array for skills
    new.raw_user_meta_data->>'category'
  );
  return new;
end;
$$;

-- Create the trigger
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Create waitlist table
create table if not exists waitlist (
  id uuid not null primary key,
  email text not null,
  full_name text,
  profession text,
  wants_early_access boolean default false,
  created_at timestamptz not null default now()
);
alter table waitlist enable row level security;
create policy "Allow all access to waitlist" on waitlist for all using (true);

-- =================================================================
-- 3. Posts, Feed, and Social Features
-- =================================================================

create table if not exists posts (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  author_id uuid not null references public.profiles,
  content text not null,
  image text,
  likes_count int not null default 0,
  replies_count int not null default 0,
  reposts_count int not null default 0,
  views_count int not null default 0,
  type text not null default 'post',
  parent_id bigint references public.posts,
  job_details jsonb
);
alter table posts enable row level security;
create policy "Posts are viewable by everyone." on posts for select using (true);
create policy "Users can insert their own posts." on posts for insert with check (auth.uid() = author_id);
create policy "Users can update their own posts." on posts for update using (auth.uid() = author_id);
create policy "Users can delete their own posts." on posts for delete using (auth.uid() = author_id);


-- =================================================================
-- 4. Tasks for Dashboard
-- =================================================================
create table if not exists tasks (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users on delete cascade,
  title text not null,
  priority text not null default 'Medium',
  status text not null default 'todo',
  created_at timestamptz not null default now()
);
alter table tasks enable row level security;
create policy "Users can manage their own tasks." on tasks for all using (auth.uid() = user_id);

-- =================================================================
-- 5. Courses
-- =================================================================
create table if not exists courses (
  id text not null primary key,
  title text,
  author text,
  price numeric,
  category text,
  description text,
  image_url text,
  level text
);
alter table courses enable row level security;
create policy "Courses are viewable by everyone" on courses for select using (true);
create policy "Admins can manage courses" on courses for all using (true); -- Simplified for prototype


-- =================================================================
-- 6. News / Articles
-- =================================================================
create table if not exists articles (
  id bigint generated by default as identity primary key,
  created_at timestamptz not null default now(),
  title text,
  excerpt text,
  image_url text,
  author text,
  category text
);
alter table articles enable row level security;
create policy "Articles are viewable by everyone" on articles for select using (true);
create policy "Admins can manage articles" on articles for all using (true);

-- =================================================================
-- 7. Ad Studio / Campaigns
-- =================================================================
create table if not exists campaigns (
    id bigint generated by default as identity primary key,
    user_id uuid not null references auth.users,
    name text not null,
    status text not null,
    type text not null,
    spend numeric not null,
    conversions int not null,
    created_at timestamptz default now() not null
);
alter table campaigns enable row level security;
create policy "Users can manage their own campaigns" on campaigns for all using (auth.uid() = user_id);


-- =================================================================
-- 8. Messaging / Conversations
-- =================================================================
create table if not exists conversations (
    id bigint generated by default as identity primary key,
    created_at timestamptz default now() not null,
    last_message_id bigint,
    is_group boolean default false,
    name text,
    avatar_url text
);
alter table conversations enable row level security;
create policy "All can see conversations" on conversations for select using (true);
create policy "All can insert conversations" on conversations for insert with check(true);

create table if not exists messages (
    id bigint generated by default as identity primary key,
    created_at timestamptz default now() not null,
    conversation_id bigint not null references public.conversations,
    user_id uuid not null references public.profiles,
    content text not null
);
alter table messages enable row level security;
create policy "All can see messages" on messages for select using (true);
create policy "All can insert messages" on messages for insert with check(true);

create table if not exists conversation_participants (
    conversation_id bigint not null references public.conversations,
    user_id uuid not null references public.profiles,
    created_at timestamptz default now() not null,
    primary key (conversation_id, user_id)
);
alter table conversation_participants enable row level security;
create policy "All can see participants" on conversation_participants for select using (true);
create policy "All can insert participants" on conversation_participants for insert with check(true);

-- Add foreign key constraint to conversations table
alter table conversations add constraint conversations_last_message_id_fkey foreign key (last_message_id) references messages(id);


-- =================================================================
-- 9. Work Experience
-- =================================================================
create table if not exists experiences (
    id bigint generated by default as identity primary key,
    user_id uuid not null references auth.users,
    title text not null,
    company text not null,
    duration text not null,
    description text,
    start_date date,
    end_date date
);
alter table experiences enable row level security;
create policy "Users can manage their own experiences" on experiences for all using (auth.uid() = user_id);

-- =================================================================
-- 10. Agency and Analytics Tables
-- =================================================================

create table if not exists agencies (
    id bigint generated by default as identity primary key,
    name text not null,
    created_at timestamptz default now() not null
);
alter table agencies enable row level security;
create policy "Allow all access to agencies" on agencies for all using (true);

create table if not exists clients (
    id bigint generated by default as identity primary key,
    agency_id bigint not null references public.agencies,
    name text not null,
    status text,
    created_at timestamptz default now() not null
);
alter table clients enable row level security;
create policy "Allow all access to clients" on clients for all using (true);


create table if not exists projects (
    id bigint generated by default as identity primary key,
    agency_id bigint not null references public.agencies,
    name text not null,
    status text,
    created_at timestamptz default now() not null
);
alter table projects enable row level security;
create policy "Allow all access to projects" on projects for all using (true);


create table if not exists monthly_metrics (
    id bigint generated by default as identity primary key,
    agency_id bigint not null references public.agencies,
    month date not null,
    revenue numeric not null,
    expenses numeric not null,
    new_leads integer not null,
    projects_won integer not null,
    portfolio_updates integer not null,
    client_satisfaction_score numeric,
    team_satisfaction_score numeric
);
alter table monthly_metrics enable row level security;
create policy "Allow all access to monthly_metrics" on monthly_metrics for all using (true);

create table if not exists user_daily_metrics (
    id bigint generated by default as identity primary key,
    user_id uuid not null references auth.users,
    date date not null,
    profile_views integer not null default 0,
    search_appearances integer not null default 0,
    connections_made integer not null default 0,
    post_likes integer not null default 0,
    skill_sync_matches integer not null default 0,
    revenue_generated numeric not null default 0,
    projects_completed integer not null default 0,
    unique(user_id, date)
);
alter table user_daily_metrics enable row level security;
create policy "Users can manage their own metrics" on user_daily_metrics for all using (auth.uid() = user_id);


create table if not exists user_monthly_metrics (
    id bigint generated by default as identity primary key,
    user_id uuid not null references auth.users,
    month date not null,
    total_revenue numeric,
    total_projects integer,
    total_impressions integer,
    new_clients integer,
    avg_rev_per_project numeric,
    unique(user_id, month)
);
alter table user_monthly_metrics enable row level security;
create policy "Users can manage their own monthly metrics" on user_monthly_metrics for all using (auth.uid() = user_id);

-- Function to aggregate daily metrics into monthly
create or replace function public.aggregate_user_metrics_to_monthly()
returns void as $$
begin
  insert into user_monthly_metrics (user_id, month, total_revenue, total_projects, total_impressions, new_clients, avg_rev_per_project)
  select
    user_id,
    date_trunc('month', date)::date,
    sum(revenue_generated),
    sum(projects_completed),
    sum(profile_views + search_appearances),
    sum(connections_made),
    case when sum(projects_completed) > 0 then sum(revenue_generated) / sum(projects_completed) else 0 end
  from user_daily_metrics
  where date >= date_trunc('month', now()) - interval '1 month' and date < date_trunc('month', now())
  group by user_id, date_trunc('month', date)
  on conflict (user_id, month) do update set
    total_revenue = excluded.total_revenue,
    total_projects = excluded.total_projects,
    total_impressions = excluded.total_impressions,
    new_clients = excluded.new_clients,
    avg_rev_per_project = excluded.avg_rev_per_project;
end;
$$ language plpgsql;

-- Schedule the aggregation function to run on the 1st of every month
select cron.schedule('aggregate-monthly-metrics', '0 1 1 * *', 'select public.aggregate_user_metrics_to_monthly()');


-- =================================================================
-- 11. Sample Data
-- =================================================================

-- Insert sample agency
insert into agencies (id, name) values (1, 'Sentry Default Agency') on conflict do nothing;

-- Insert sample monthly metrics for agency
insert into monthly_metrics (agency_id, month, revenue, expenses, new_leads, projects_won, portfolio_updates, client_satisfaction_score, team_satisfaction_score) values
(1, '2024-01-01', 50000, 20000, 15, 5, 10, 4.2, 4.5),
(1, '2024-02-01', 55000, 22000, 20, 7, 12, 4.3, 4.6),
(1, '2024-03-01', 62000, 25000, 18, 6, 15, 4.5, 4.5),
(1, '2024-04-01', 68000, 27000, 25, 8, 18, 4.6, 4.7),
(1, '2024-05-01', 75000, 30000, 30, 10, 20, 4.7, 4.8),
(1, '2024-06-01', 82000, 32000, 28, 9, 22, 4.8, 4.7)
on conflict do nothing;

-- Insert sample clients
insert into clients (id, agency_id, name, status) values
(1, 1, 'Innovate Inc.', 'Active'),
(2, 1, 'Creative Solutions', 'Active'),
(3, 1, 'TechCorp', 'Inactive')
on conflict do nothing;

-- Insert sample projects
insert into projects (id, agency_id, name, status) values
(1, 1, 'Website Redesign', 'Completed'),
(2, 1, 'Mobile App Dev', 'In Progress'),
(3, 1, 'Branding Guide', 'In Progress')
on conflict do nothing;

-- Insert sample courses
insert into courses (id, title, author, price, category, description, image_url, level) values
('1', 'Advanced TypeScript', 'John Doe', 99.99, 'Development', 'Master advanced TypeScript features for large-scale applications.', 'https://picsum.photos/seed/course1/600/400', 'Advanced'),
('2', 'UI/UX Design Fundamentals', 'Jane Smith', 49.99, 'Design', 'Learn the core principles of UI/UX design.', 'https://picsum.photos/seed/course2/600/400', 'Beginner'),
('3', 'Creative Copywriting', 'Alice Johnson', 79.99, 'Writing', 'Craft compelling copy that converts.', 'https://picsum.photos/seed/course3/600/400', 'Intermediate')
on conflict do nothing;

-- Insert sample articles
insert into articles (id, title, excerpt, image_url, author, category) values
(1, 'The Future of AI in Web Development', 'AI is transforming how we build websites, from code generation to automated testing.', 'https://picsum.photos/seed/news1/600/400', 'AI Insights Weekly', 'AI & Machine Learning'),
(2, 'Mastering the Freelance Market in 2024', 'Tips and tricks for thriving as a freelancer in a competitive world.', 'https://picsum.photos/seed/news2/600/400', 'Freelancer Hub', 'Freelance'),
(3, 'Design Trends to Watch', 'From neo-brutalism to AI-generated graphics, here''s what''s hot in design.', 'https://picsum.photos/seed/news3/600/400', 'Creative Bloq', 'Design'),
(4, 'The Rise of Serverless', 'Why serverless architecture is becoming the go-to for modern applications.', 'https://picsum.photos/seed/news4/600/400', 'TechCrunch', 'Development')
on conflict do nothing;

-- Insert sample campaigns
-- Assuming a user with id from auth.users exists. You might need to change this UUID.
-- This part is tricky as it requires a valid user ID. The user will need to replace this.
-- insert into campaigns (user_id, name, status, type, spend, conversions) values
-- ('your-user-id-here', 'Summer Profile Boost', 'Active', 'Profile Spotlight', 150.00, 12),
-- ('your-user-id-here', 'New Course Launch', 'Paused', 'Product Listing', 350.50, 28)
-- on conflict do nothing;

-- Insert sample daily user metrics for a specific user.
-- The user will need to replace the user_id with their actual user ID after signup.
DO $$
DECLARE
    -- To get your user ID, run this in the SQL Editor after you've signed up: select id from auth.users limit 1;
    target_user_id UUID := '00000000-0000-0000-0000-000000000000'; -- << REPLACE THIS WITH YOUR ACTUAL USER ID
BEGIN
    IF target_user_id <> '00000000-0000-0000-0000-000000000000' THEN
        FOR i IN 0..89 LOOP
            INSERT INTO user_daily_metrics (user_id, date, profile_views, search_appearances, connections_made, post_likes, skill_sync_matches, revenue_generated, projects_completed)
            VALUES (
                target_user_id,
                current_date - (i || ' days')::interval,
                floor(random() * 50 + 10),
                floor(random() * 100 + 20),
                floor(random() * 5),
                floor(random() * 20),
                floor(random() * 3),
                floor(random() * 500 + 50),
                floor(random() * 2)
            ) ON CONFLICT (user_id, date) DO NOTHING;
        END LOOP;
    END IF;
END $$;
